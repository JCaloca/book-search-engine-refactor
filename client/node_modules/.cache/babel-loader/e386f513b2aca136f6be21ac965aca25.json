{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\jacob\\\\homework-root\\\\book-search-engine-refactor\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\jacob\\\\homework-root\\\\book-search-engine-refactor\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\Users\\\\jacob\\\\homework-root\\\\book-search-engine-refactor\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\jacob\\\\homework-root\\\\book-search-engine-refactor\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isAsyncIterable } from '../jsutils/isAsyncIterable.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { collectFields } from './collectFields.mjs';\nimport { assertValidExecutionArguments, buildExecutionContext, buildResolveInfo, execute, getFieldDef } from './execute.mjs';\nimport { mapAsyncIterator } from './mapAsyncIterator.mjs';\nimport { getArgumentValues } from './values.mjs';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport function subscribe(_x) {\n  return _subscribe.apply(this, arguments);\n}\nfunction _subscribe() {\n  _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(args) {\n    var resultOrStream,\n      mapSourceToResponse,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // Temporary for v15 to v16 migration. Remove in v17\n            _args.length < 2 || devAssert(false, 'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.');\n            _context.next = 3;\n            return createSourceEventStream(args);\n          case 3:\n            resultOrStream = _context.sent;\n            if (isAsyncIterable(resultOrStream)) {\n              _context.next = 6;\n              break;\n            }\n            return _context.abrupt(\"return\", resultOrStream);\n          case 6:\n            // For each payload yielded from a subscription, map it over the normal\n            // GraphQL `execute` function, with `payload` as the rootValue.\n            // This implements the \"MapSourceToResponseEvent\" algorithm described in\n            // the GraphQL specification. The `execute` function provides the\n            // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n            // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n            mapSourceToResponse = function mapSourceToResponse(payload) {\n              return execute(_objectSpread(_objectSpread({}, args), {}, {\n                rootValue: payload\n              }));\n            }; // Map every source value to a ExecutionResult value as described above.\n            return _context.abrupt(\"return\", mapAsyncIterator(resultOrStream, mapSourceToResponse));\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _subscribe.apply(this, arguments);\n}\nfunction toNormalizedArgs(args) {\n  var firstArg = args[0];\n  if (firstArg && 'document' in firstArg) {\n    return firstArg;\n  }\n  return {\n    schema: firstArg,\n    // FIXME: when underlying TS bug fixed, see https://github.com/microsoft/TypeScript/issues/31613\n    document: args[1],\n    rootValue: args[2],\n    contextValue: args[3],\n    variableValues: args[4],\n    operationName: args[5],\n    subscribeFieldResolver: args[6]\n  };\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\nexport function createSourceEventStream() {\n  return _createSourceEventStream.apply(this, arguments);\n}\nfunction _createSourceEventStream() {\n  _createSourceEventStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var _len,\n      rawArgs,\n      _key,\n      args,\n      schema,\n      document,\n      variableValues,\n      exeContext,\n      eventStream,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            for (_len = _args2.length, rawArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n              rawArgs[_key] = _args2[_key];\n            }\n            args = toNormalizedArgs(rawArgs);\n            schema = args.schema, document = args.document, variableValues = args.variableValues; // If arguments are missing or incorrectly typed, this is an internal\n            // developer mistake which should throw an early error.\n            assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n            // a \"Response\" with only errors is returned.\n            exeContext = buildExecutionContext(args); // Return early errors if execution context failed.\n            if ('schema' in exeContext) {\n              _context2.next = 7;\n              break;\n            }\n            return _context2.abrupt(\"return\", {\n              errors: exeContext\n            });\n          case 7:\n            _context2.prev = 7;\n            _context2.next = 10;\n            return executeSubscription(exeContext);\n          case 10:\n            eventStream = _context2.sent;\n            if (isAsyncIterable(eventStream)) {\n              _context2.next = 13;\n              break;\n            }\n            throw new Error('Subscription field must return Async Iterable. ' + \"Received: \".concat(inspect(eventStream), \".\"));\n          case 13:\n            return _context2.abrupt(\"return\", eventStream);\n          case 16:\n            _context2.prev = 16;\n            _context2.t0 = _context2[\"catch\"](7);\n            if (!(_context2.t0 instanceof GraphQLError)) {\n              _context2.next = 20;\n              break;\n            }\n            return _context2.abrupt(\"return\", {\n              errors: [_context2.t0]\n            });\n          case 20:\n            throw _context2.t0;\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[7, 16]]);\n  }));\n  return _createSourceEventStream.apply(this, arguments);\n}\nfunction executeSubscription(_x2) {\n  return _executeSubscription.apply(this, arguments);\n}\nfunction _executeSubscription() {\n  _executeSubscription = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(exeContext) {\n    var schema, fragments, operation, variableValues, rootValue, rootType, rootFields, _, responseName, fieldNodes, fieldDef, fieldName, path, info, _fieldDef$subscribe, args, contextValue, resolveFn, eventStream;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            schema = exeContext.schema, fragments = exeContext.fragments, operation = exeContext.operation, variableValues = exeContext.variableValues, rootValue = exeContext.rootValue;\n            rootType = schema.getSubscriptionType();\n            if (!(rootType == null)) {\n              _context3.next = 4;\n              break;\n            }\n            throw new GraphQLError('Schema is not configured to execute subscription operation.', {\n              nodes: operation\n            });\n          case 4:\n            rootFields = collectFields(schema, fragments, variableValues, rootType, operation.selectionSet);\n            _ = _slicedToArray(_toConsumableArray(rootFields.entries())[0], 2), responseName = _[0], fieldNodes = _[1];\n            fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n            if (fieldDef) {\n              _context3.next = 10;\n              break;\n            }\n            fieldName = fieldNodes[0].name.value;\n            throw new GraphQLError(\"The subscription field \\\"\".concat(fieldName, \"\\\" is not defined.\"), {\n              nodes: fieldNodes\n            });\n          case 10:\n            path = addPath(undefined, responseName, rootType.name);\n            info = buildResolveInfo(exeContext, fieldDef, fieldNodes, rootType, path);\n            _context3.prev = 12;\n            // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n            // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n            // Build a JS object of arguments from the field.arguments AST, using the\n            // variables scope to fulfill any variable references.\n            args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n            // is provided to every resolve function within an execution. It is commonly\n            // used to represent an authenticated user, or request-specific caches.\n            contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n            // AsyncIterable yielding raw payloads.\n            resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.subscribeFieldResolver;\n            _context3.next = 18;\n            return resolveFn(rootValue, args, contextValue, info);\n          case 18:\n            eventStream = _context3.sent;\n            if (!(eventStream instanceof Error)) {\n              _context3.next = 21;\n              break;\n            }\n            throw eventStream;\n          case 21:\n            return _context3.abrupt(\"return\", eventStream);\n          case 24:\n            _context3.prev = 24;\n            _context3.t0 = _context3[\"catch\"](12);\n            throw locatedError(_context3.t0, fieldNodes, pathToArray(path));\n          case 27:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[12, 24]]);\n  }));\n  return _executeSubscription.apply(this, arguments);\n}","map":{"version":3,"names":["devAssert","inspect","isAsyncIterable","addPath","pathToArray","GraphQLError","locatedError","collectFields","assertValidExecutionArguments","buildExecutionContext","buildResolveInfo","execute","getFieldDef","mapAsyncIterator","getArgumentValues","subscribe","args","length","createSourceEventStream","resultOrStream","mapSourceToResponse","payload","rootValue","toNormalizedArgs","firstArg","schema","document","contextValue","variableValues","operationName","subscribeFieldResolver","rawArgs","exeContext","errors","executeSubscription","eventStream","Error","fragments","operation","rootType","getSubscriptionType","nodes","rootFields","selectionSet","entries","responseName","fieldNodes","fieldDef","fieldName","name","value","path","undefined","info","resolveFn","_fieldDef$subscribe"],"sources":["C:/Users/jacob/homework-root/book-search-engine-refactor/client/node_modules/graphql/execution/subscribe.mjs"],"sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isAsyncIterable } from '../jsutils/isAsyncIterable.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { collectFields } from './collectFields.mjs';\nimport {\n  assertValidExecutionArguments,\n  buildExecutionContext,\n  buildResolveInfo,\n  execute,\n  getFieldDef,\n} from './execute.mjs';\nimport { mapAsyncIterator } from './mapAsyncIterator.mjs';\nimport { getArgumentValues } from './values.mjs';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport async function subscribe(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    devAssert(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const resultOrStream = await createSourceEventStream(args);\n\n  if (!isAsyncIterable(resultOrStream)) {\n    return resultOrStream;\n  } // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  const mapSourceToResponse = (payload) =>\n    execute({ ...args, rootValue: payload }); // Map every source value to a ExecutionResult value as described above.\n\n  return mapAsyncIterator(resultOrStream, mapSourceToResponse);\n}\n\nfunction toNormalizedArgs(args) {\n  const firstArg = args[0];\n\n  if (firstArg && 'document' in firstArg) {\n    return firstArg;\n  }\n\n  return {\n    schema: firstArg,\n    // FIXME: when underlying TS bug fixed, see https://github.com/microsoft/TypeScript/issues/31613\n    document: args[1],\n    rootValue: args[2],\n    contextValue: args[3],\n    variableValues: args[4],\n    operationName: args[5],\n    subscribeFieldResolver: args[6],\n  };\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\nexport async function createSourceEventStream(...rawArgs) {\n  const args = toNormalizedArgs(rawArgs);\n  const { schema, document, variableValues } = args; // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext(args); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  }\n\n  try {\n    const eventStream = await executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.\n\n    if (!isAsyncIterable(eventStream)) {\n      throw new Error(\n        'Subscription field must return Async Iterable. ' +\n          `Received: ${inspect(eventStream)}.`,\n      );\n    }\n\n    return eventStream;\n  } catch (error) {\n    // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.\n    // Otherwise treat the error as a system-class error and re-throw it.\n    if (error instanceof GraphQLError) {\n      return {\n        errors: [error],\n      };\n    }\n\n    throw error;\n  }\n}\n\nasync function executeSubscription(exeContext) {\n  const { schema, fragments, operation, variableValues, rootValue } =\n    exeContext;\n  const rootType = schema.getSubscriptionType();\n\n  if (rootType == null) {\n    throw new GraphQLError(\n      'Schema is not configured to execute subscription operation.',\n      {\n        nodes: operation,\n      },\n    );\n  }\n\n  const rootFields = collectFields(\n    schema,\n    fragments,\n    variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const [responseName, fieldNodes] = [...rootFields.entries()][0];\n  const fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    const fieldName = fieldNodes[0].name.value;\n    throw new GraphQLError(\n      `The subscription field \"${fieldName}\" is not defined.`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  const path = addPath(undefined, responseName, rootType.name);\n  const info = buildResolveInfo(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    rootType,\n    path,\n  );\n\n  try {\n    var _fieldDef$subscribe;\n\n    // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n    // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    const args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n    const resolveFn =\n      (_fieldDef$subscribe = fieldDef.subscribe) !== null &&\n      _fieldDef$subscribe !== void 0\n        ? _fieldDef$subscribe\n        : exeContext.subscribeFieldResolver;\n    const eventStream = await resolveFn(rootValue, args, contextValue, info);\n\n    if (eventStream instanceof Error) {\n      throw eventStream;\n    }\n\n    return eventStream;\n  } catch (error) {\n    throw locatedError(error, fieldNodes, pathToArray(path));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}